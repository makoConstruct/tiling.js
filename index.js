// Generated by CoffeeScript 1.8.0
(function() {
  var NonDirectlyRepeatingRNG, intMultiplication, mouseEvRelTo,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  intMultiplication = Math.imul || function(a, b) {
    var ah, al, bh, bl;
    ah = (a >>> 16) & 0xffff;
    al = a & 0xffff;
    bh = (b >>> 16) & 0xffff;
    bl = b & 0xffff;
    return (al * bl) + (((ah * bl + al * bh) << 16) >>> 0) | 0;
  };

  mouseEvRelTo = function(ev, el) {
    var cr;
    cr = el.getBoundingClientRect();
    return {
      x: ev.pageX - cr.left,
      y: ev.pageY - cr.top
    };
  };

  NonDirectlyRepeatingRNG = (function() {
    var lcg;

    lcg = function(v) {
      return (intMultiplication(v, 22695477) + 1) | 0;
    };

    NonDirectlyRepeatingRNG.prototype.takeRn = function() {
      this.state = lcg(this.state);
      return Math.abs(this.state) % this.n;
    };

    function NonDirectlyRepeatingRNG(n, state) {
      this.n = n;
      this.state = state != null ? state : 432;
      this.previous = this.state % this.n;
    }

    NonDirectlyRepeatingRNG.prototype.next = function() {
      return this.previous = (this.previous + 1 + (this.takeRn() % (this.n - 1))) % this.n;
    };

    return NonDirectlyRepeatingRNG;

  })();

  window.onload = function() {
    var StemContent, centering, containts, genStdDiv, m, shadegen, tileFor, tileVariantMatchSet, tileVariants;
    shadegen = new ShadeGenerator();
    centering = function(el) {
      var innec, rootc;
      rootc = document.createElement('div');
      rootc.classList.add('tilingjs_filling');
      rootc.style.display = 'table';
      rootc.style['text-align'] = 'center';
      rootc.style['line-height'] = '0px';
      innec = document.createElement('div');
      innec.style.display = 'table-cell';
      innec.style['vertical-align'] = 'middle';
      rootc.appendChild(innec);
      el.style.display = 'inline-block';
      innec.appendChild(el);
      return rootc;
    };
    genStdDiv = function() {
      var el;
      el = document.createElement('div');
      el.classList.add('tilingjs_filling');
      el.style.backgroundColor = shadegen.takeColor();
      return el;
    };
    tileVariants = [
      {
        called: 'Help Message',
        gen: function() {
          var el;
          el = genStdDiv();
          el.innerHTML = "You can move and resize tiles by middle clicking and dragging. Dragging from the center will move, dragging a corner will resize.\nYou can create tiles by pressing alt+c<br>\nYou can banish tiles by pressing alt+b<br>";
          el.style.padding = '7px';
          return content(el);
        }
      }, {
        called: 'Title',
        gen: function() {
          var el;
          el = genStdDiv();
          el.textContent = 'tiling.js';
          el.style.lineHeight = '100%';
          el.style.padding = '4px';
          el.classList.add('title');
          return content(el);
        }
      }, {
        called: 'About',
        gen: function() {
          var el, h;
          el = genStdDiv();
          el.style.padding = '7px';
          h = document.createElement('h2');
          h.textContent = "What is tiling.js?";
          el.appendChild(h);
          el.appendChild(document.createTextNode("A tiling window manager for web applications"));
          return content(el);
        }
      }, {
        called: 'Empty',
        gen: function() {
          return content(genStdDiv());
        }
      }, {
        called: 'Logo',
        gen: function() {
          var cenel, img;
          img = document.createElement('img');
          img.src = 'roundlogo.png';
          cenel = centering(img);
          cenel.style.backgroundColor = shadegen.takeColor();
          return content(cenel);
        }
      }
    ];
    tileVariantMatchSet = matchset(tileVariants.map(function(o) {
      return [o.called, o.gen];
    }), null, true);
    tileFor = function(called) {
      var tv, _i, _len;
      for (_i = 0, _len = tileVariants.length; _i < _len; _i++) {
        tv = tileVariants[_i];
        if (tv.called === called) {
          return tv.gen();
        }
      }
      return null;
    };
    StemContent = (function(_super) {
      __extends(StemContent, _super);

      function StemContent() {
        var input, stemback;
        input = document.createElement('input');
        input.addEventListener('mouseover', (function(_this) {
          return function() {
            return input.focus();
          };
        })(this));
        this.input = input;
        stemback = document.createElement('div');
        stemback.classList.add('stemtile', 'tilingjs_filling');
        stemback.style.backgroundColor = shadegen.takeColor();
        stemback.appendChild(input);
        this.el = stemback;
        this.au = attachAutocompletion({
          input: input,
          matchset: tileVariantMatchSet,
          matchCallback: (function(_this) {
            return function(gen) {
              var newContent;
              newContent = gen();
              _this.onClose();
              _this.tileHolder.replaceContent(newContent);
              return newContent.onOpen();
            };
          })(this),
          firesOnSpace: true,
          erasesOnEscape: true
        });
      }

      StemContent.prototype.onOpen = function() {
        return this.input.focus();
      };

      StemContent.prototype.onClose = function() {
        return this.au.detach();
      };

      return StemContent;

    })(this.TileContent);
    containts = document.getElementById('containts');
    m = mount({
      container: containts,
      defaultContentGenerator: function() {
        return new StemContent;
      },
      initial: widthBeing(upto(629, line(line(position({
        content: tileFor('Logo'),
        desiredWidth: 77,
        desiredHeight: 77
      }), tileFor('Title')), position({
        content: tileFor('About'),
        desiredHeight: 110
      }), tileFor('Help Message'))), upto(line(line(position({
        content: tileFor('Logo'),
        desiredWidth: 77,
        desiredHeight: 77
      }), tileFor('Title')), line(tileFor('About'), tileFor('Help Message')))))
    });
    return this.mounting = m;
  };

}).call(this);
